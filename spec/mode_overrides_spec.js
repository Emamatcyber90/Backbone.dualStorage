// Generated by CoffeeScript 1.9.3
(function() {
  var Collection, Model, backboneSync, dualSync, localStorage, localSync, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  backboneSync = window.backboneSync, localSync = window.localSync, dualSync = window.dualSync, localStorage = window.localStorage;

  ref = {}, Collection = ref.Collection, Model = ref.Model;

  describe('mode overrides', function() {
    this.timeout(100);
    beforeEach(function() {
      localStorage.clear();
      Model = (function(superClass) {
        extend(Model, superClass);

        function Model() {
          return Model.__super__.constructor.apply(this, arguments);
        }

        Model.prototype.idAttribute = '_id';

        Model.prototype.urlRoot = 'things/';

        return Model;

      })(Backbone.Model);
      return Collection = (function(superClass) {
        extend(Collection, superClass);

        function Collection() {
          return Collection.__super__.constructor.apply(this, arguments);
        }

        Collection.prototype.model = Model;

        Collection.prototype.url = Model.prototype.urlRoot;

        return Collection;

      })(Backbone.Collection);
    });
    describe('via properties', function() {
      describe('Model.local', function() {
        it('uses only local storage when true', function(done) {
          var LocalModel, model, saved;
          LocalModel = (function(superClass) {
            extend(LocalModel, superClass);

            function LocalModel() {
              return LocalModel.__super__.constructor.apply(this, arguments);
            }

            LocalModel.prototype.local = true;

            return LocalModel;

          })(Model);
          model = new LocalModel;
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            return done();
          });
        });
        return it('does not mark local changes dirty and will not sync them (deprecated; will sync after 2.0)', function(done) {
          var LocalModel, collection, model, saved;
          LocalModel = (function(superClass) {
            extend(LocalModel, superClass);

            function LocalModel() {
              return LocalModel.__super__.constructor.apply(this, arguments);
            }

            LocalModel.prototype.local = true;

            return LocalModel;

          })(Model);
          model = new LocalModel;
          collection = new Collection([model]);
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            collection.syncDirtyAndDestroyed();
            expect(backboneSync.callCount).to.equal(0);
            return done();
          });
        });
      });
      describe('Model.remote', function() {
        return it('uses only remote storage when true', function(done) {
          var RemoteModel, model, saved;
          RemoteModel = (function(superClass) {
            extend(RemoteModel, superClass);

            function RemoteModel() {
              return RemoteModel.__super__.constructor.apply(this, arguments);
            }

            RemoteModel.prototype.remote = true;

            return RemoteModel;

          })(Model);
          model = new RemoteModel({
            _id: 1
          });
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(1);
            return model.fetch({
              errorStatus: 0,
              error: function() {
                return done();
              }
            });
          });
        });
      });
      describe('Collection.local', function() {
        return it('uses only local storage when true', function(done) {
          var LocalCollection, collection, fetched;
          LocalCollection = (function(superClass) {
            extend(LocalCollection, superClass);

            function LocalCollection() {
              return LocalCollection.__super__.constructor.apply(this, arguments);
            }

            LocalCollection.prototype.local = true;

            return LocalCollection;

          })(Collection);
          collection = new LocalCollection;
          backboneSync.reset();
          fetched = $.Deferred();
          collection.fetch({
            success: function() {
              return fetched.resolve();
            }
          });
          return fetched.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            return done();
          });
        });
      });
      return describe('Collection.remote', function() {
        return it('uses only remote storage when true', function(done) {
          var RemoteCollection, collection, fetched;
          RemoteCollection = (function(superClass) {
            extend(RemoteCollection, superClass);

            function RemoteCollection() {
              return RemoteCollection.__super__.constructor.apply(this, arguments);
            }

            RemoteCollection.prototype.remote = true;

            return RemoteCollection;

          })(Collection);
          collection = new RemoteCollection({
            _id: 1
          });
          backboneSync.reset();
          fetched = $.Deferred();
          collection.fetch({
            success: function() {
              return fetched.resolve();
            }
          });
          return fetched.done(function() {
            expect(backboneSync.callCount).to.equal(1);
            return collection.fetch({
              errorStatus: 0,
              error: function() {
                return done();
              }
            });
          });
        });
      });
    });
    describe('via methods, dynamically', function() {
      describe('Model.local', function() {
        return it('uses only local storage when the function returns true', function(done) {
          var LocalModel, model, saved;
          LocalModel = (function(superClass) {
            extend(LocalModel, superClass);

            function LocalModel() {
              return LocalModel.__super__.constructor.apply(this, arguments);
            }

            LocalModel.prototype.local = function() {
              return true;
            };

            return LocalModel;

          })(Model);
          model = new LocalModel;
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            return done();
          });
        });
      });
      describe('Model.remote', function() {
        return it('uses only remote storage when the function returns true', function(done) {
          var RemoteModel, model, saved;
          RemoteModel = (function(superClass) {
            extend(RemoteModel, superClass);

            function RemoteModel() {
              return RemoteModel.__super__.constructor.apply(this, arguments);
            }

            RemoteModel.prototype.remote = function() {
              return true;
            };

            return RemoteModel;

          })(Model);
          model = new RemoteModel({
            _id: 1
          });
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(1);
            return model.fetch({
              errorStatus: 0,
              error: function() {
                return done();
              }
            });
          });
        });
      });
      describe('Collection.local', function() {
        return it('uses only local storage when the function returns true', function(done) {
          var LocalCollection, collection, fetched;
          LocalCollection = (function(superClass) {
            extend(LocalCollection, superClass);

            function LocalCollection() {
              return LocalCollection.__super__.constructor.apply(this, arguments);
            }

            LocalCollection.prototype.local = function() {
              return true;
            };

            return LocalCollection;

          })(Collection);
          collection = new LocalCollection;
          backboneSync.reset();
          fetched = $.Deferred();
          collection.fetch({
            success: function() {
              return fetched.resolve();
            }
          });
          return fetched.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            return done();
          });
        });
      });
      return describe('Collection.remote', function() {
        return it('uses only remote storage when the function returns true', function(done) {
          var RemoteCollection, collection, fetched;
          RemoteCollection = (function(superClass) {
            extend(RemoteCollection, superClass);

            function RemoteCollection() {
              return RemoteCollection.__super__.constructor.apply(this, arguments);
            }

            RemoteCollection.prototype.remote = function() {
              return true;
            };

            return RemoteCollection;

          })(Collection);
          collection = new RemoteCollection({
            _id: 1
          });
          backboneSync.reset();
          fetched = $.Deferred();
          collection.fetch({
            success: function() {
              return fetched.resolve();
            }
          });
          return fetched.done(function() {
            expect(backboneSync.callCount).to.equal(1);
            return collection.fetch({
              errorStatus: 0,
              error: function() {
                return done();
              }
            });
          });
        });
      });
    });
    return describe('via options', function() {
      return describe('{remote: false}', function() {
        it('uses local storage as if offline', function(done) {
          var model, saved;
          model = new Model;
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            remote: false,
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            return done();
          });
        });
        return it('marks records dirty, to be synced when online', function(done) {
          var collection, model, saved;
          model = new Model;
          collection = new Collection([model]);
          backboneSync.reset();
          saved = $.Deferred();
          model.save(null, {
            remote: false,
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            expect(backboneSync.callCount).to.equal(0);
            collection.syncDirtyAndDestroyed();
            expect(backboneSync.callCount).to.equal(1);
            return done();
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=mode_overrides_spec.js.map
